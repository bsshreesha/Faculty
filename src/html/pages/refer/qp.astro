---
import Head from "@components/_head.astro";
import Footer from "@components/dashboard/_footer.astro";
import Topbar from "@components/dashboard/_topbar.astro";
import Sidenav from "@components/dashboard/_sidenav.astro";
import Scripts from "@components/_scripts.astro";
import ColorMode from "@components/docs/color-mode.mdx";

const title = "Upload Previous Year Question Paper";
const path = "../../../dist";
const mainPage = "refer";
const page = "qp";
---

<!DOCTYPE html>
<html lang="en">
  <!--begin::Head-->
  <head>
    <Head title={title} path={path} />
    <style>
     .error-border {
        border: 2px solid red !important;
    }

    .error-message {
        font-size: 14px;
        color: red;
        margin-top: 5px;
        display: block;
    }
    
    label{
        font-weight: bold;
    }

   .file-upload-container {
            border: 2px dashed;
            border-radius: 15px;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            transition: all 0.3s ease;
            min-height: 120px;
            cursor: pointer;
        }

        .file-upload-container:hover {
            border-color: #002855;
        }

        .file-upload-container.error {
            border-color: #dc3545;
        }

        .file-upload-container.has-files {
            border-style: solid;
            border-color: #28a745;
        }

        .file-upload-container.uploading {
            border-color: #007bff;
        }

       .file-upload-button {
        background: linear-gradient(135deg, #002855 0%, #001f40 100%);
        color: white;
        border: 2px solid #001f40;
        padding: 0.65rem 2rem;
        font-size: 0.95rem;
        border-radius: 35px;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 40, 85, 0.2);
        margin-top: -0.5rem; /* moved button higher above */
    }

    .file-upload-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 40, 85, 0.3);
    }

        .file-upload-text {
            color: #6b7280;
            text-align: center;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        .file-list {
            border-radius: 10px;
            padding: 1rem;
            margin-top: 1rem;
            border: 1px solid var(--bs-border-color, #dee2e6);
            background-color: var(--bs-body-bg, #fff);
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
            width: 100%;
            overflow-x: auto;
            max-width: 100%;
        }

        .file-item {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: space-between;
            gap: 0.75rem;
            padding: 0.5rem 0;
            border-bottom: 1px solid var(--bs-border-color, #dee2e6);
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .file-item:hover {
            background-color: var(--bs-tertiary-bg, #f8f9fa);
            border-radius: 5px;
        }

        .file-item:last-child {
            border-bottom: none;
        }

        .btn-group-custom {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid;
        }

        

        .upload-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        /* Upload Progress Styles */
        .upload-progress {
            width: 100%;
            margin-top: 1rem;
        }

        .progress-bar-animated {
            animation: progress-bar-stripes 1s linear infinite;
        }

        @keyframes progress-bar-stripes {
            0% { background-position: 1rem 0; }
            100% { background-position: 0 0; }
        }

        /* File Preview Modal Styles */
        .file-preview-content {
            max-height: 70vh;
            overflow-y: auto;
        }

        .pdf-preview {
            width: 100%;
            height: 500px;
            border: 1px solid;
            border-radius: 5px;
        }

        .file-info {
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
        }

         @media (max-width: 768px) {
            body {
                padding: 1rem 0;
            }

            .main-container {
                margin: 0 1rem;
                border-radius: 15px;
            }

            .form-header {
                padding: 1.5rem 1rem;
            }

            .form-section {
                padding: 1rem;
            }

            .btn-group-custom {
                flex-direction: column;
                align-items: center;
            }

            .file-upload-container {
                padding: 1.5rem 1rem;
            }
        }

        /* Smooth animations */
        .fade-in {
            animation: fadeIn 0.6s ease-in;
        }
    </style>
  </head>
  <!--end::Head-->
  <!--begin::Body-->
  <body class="layout-fixed sidebar-expand-lg sidebar-mini bg-body-tertiary">
    <!--begin::App Wrapper-->
    <div class="app-wrapper">
      <Topbar path={path} />
      <Sidenav path={path} mainPage={mainPage} page={page} />
      <!--begin::App Main-->
      <main class="app-main">
        <!--begin::App Content Header-->
        <div class="app-content-header">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-sm-6">
                <h3 class="mb-0">Upload Previous Year Question Paper</h3>
              </div>
              <div class="col-sm-6">
                <ol class="breadcrumb float-sm-end">
                  <li class="breadcrumb-item"><a href="/index.html">Home</a></li>
                  <li class="breadcrumb-item active" aria-current="page">
                    Previous Year Question Paper
                  </li>
                </ol>
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content Header-->
        <!--begin::App Content-->
        <div class="app-content">
          <!--begin::Container-->
          <div class="container-fluid">
            <!--begin::Row-->
            <div class="row">
              <div class="col-12">
                <!-- Default box -->
                <div class="card">
                  <div class="card-header">
                    <h3 class="card-title">Form to Upload Previous Year Question Paper</h3>

                    <div class="card-tools">
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-collapse"
                        title="Collapse"
                      >
                        <i data-lte-icon="expand" class="bi bi-plus-lg"></i>
                        <i data-lte-icon="collapse" class="bi bi-dash-lg"></i>
                      </button>
                      <button
                        type="button"
                        class="btn btn-tool"
                        data-lte-toggle="card-remove"
                        title="Remove"
                      >
                        <i class="bi bi-x-lg"></i>
                      </button>
                    </div>
                  </div>
                  <div class="card-body">
                    <form id="py_quespaper" enctype="multipart/form-data">
        <div class="row g-3">

            <!-- Title -->
            <div class="col-md-12">
                <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                <div class="input-group">
                    <input type="text" class="form-control" id="title" name="title" placeholder="Enter the Title of the file" autocomplete="off">
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top" 
                          title="Provide a clear and concise title (e.g., 'Unit 2 Notes'). Avoid special characters.">
                        <i class="bi bi-info-circle"></i>
                    </span>
                </div>
                <span class="error-message" id="titleError"></span>
            </div>

            <!-- Subject -->
            <div class="col-md-6">
                <label for="subject" class="form-label">Subject <span class="text-danger">*</span></label>
                <div class="input-group">
                    <select class="form-select" id="subject" name="subject">
                        <option value="" disabled selected>Select Subject</option>
                         <option value="21MAT11">21MAT11 - Calculus and Differential Equation</option>
                         <option value="21MAT21">21MAT21 - Advanced Calculus and Numerical Methods</option>
                         <option value="21MAT31">21MAT31 - Transform Calculus, Fourier Series and Numerical Methods</option>
                         <option value="21MATCS41">21MATCS41 - Mathematical Foundations of Computing</option>
                         <option value="21MAT656">21MAT656 - Mathematics for Machine Learning</option>
                         <option value="21CV752">21CV752 - Numerical Methods and Applications</option>
                        <!-- Add more options as needed -->
                    </select>
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                          title="Select the subject code from the curriculum.">
                        <i class="bi bi-info-circle"></i>
                    </span>
                </div>
                <span class="error-message" id="subjectError"></span>
            </div>

            <!-- Semester -->
            <div class="col-md-6">
                <label for="semester" class="form-label">Semester <span class="text-danger">*</span></label>
                <div class="input-group">
                    <select class="form-select" id="semester" name="semester">
                        <option value="" selected disabled>Select Semester</option>
                        <option value="1">1st Semester</option>
                        <option value="2">2nd Semester</option>
                        <option value="3">3rd Semester</option>
                        <option value="4">4th Semester</option>
                        <option value="5">5th Semester</option>
                        <option value="6">6th Semester</option>
                        <option value="7">7th Semester</option>
                        <option value="8">8th Semester</option>
                        <!-- Add more if needed -->
                    </select>
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                          title="Select the semester to which this file applies.">
                        <i class="bi bi-info-circle"></i>
                    </span>
                </div>
                <span class="error-message" id="semesterError"></span>
            </div>

            <!-- File Description -->
            <div class="col-md-12">
                <label for="fileDescription" class="form-label">File Description <span class="text-danger">*</span></label>
                <div class="input-group">
                    <textarea class="form-control" id="fileDescription" name="fileDescription" placeholder="Enter file description" rows="1"></textarea>
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                          title="Briefly describe the contents of the file (e.g., 'Solutions for Assignment 1').">
                        <i class="bi bi-info-circle"></i>
                    </span>
                </div>
                <span class="error-message" id="fileDescriptionError"></span>
            </div>

             <!-- File Upload Section -->
            <div class="col-md-12">                    
                    <label for="file" class="form-label">
                        Upload Files <span style="font-size: 0.85rem; color: #6b7280;">(Maximum 5 files)</span> <span class="text-danger">*</span>
                    </label>
                    
                    <div class="input-group">
                        <div class="file-upload-container form-control p-0" id="fileUploadContainer">
                            <i class="bi bi-cloud-upload upload-icon"></i>
                            <div class="file-upload-text" id="fileUploadText">
                                <strong>Click to browse files</strong><br>
                                or drag and drop your files here<br>
                                <small>PDF, Word (.docx), PowerPoint (.pptx) • Max 100MB each</small>
                            </div>
                            <label class="file-upload-button mb-0" style="cursor: pointer;">
                                <i class="bi bi-folder2-open me-2"></i>Browse Files
                                <input type="file" multiple hidden id="file" name="file" accept=".pdf,.docx,.pptx">
                            </label>
                            
                            <!-- Upload Progress -->
                            <div class="upload-progress" id="uploadProgress" style="display: none;">
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" 
                                         role="progressbar" style="width: 0%" id="progressBar">
                                        <span id="progressText">0%</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="file-list" id="fileList" style="display: none;"></div>
                        </div>
                        <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                            title="Upload up to 5 files. File format such as PDF, Word(.docx) and Presentation (.pptx) is allowed. Each file should be under 100MB.">
                            <i class="bi bi-info-circle"></i>
                        </span>
                    </div>
                    <span class="error-message" id="fileError"></span>
                </div>

            <div class="row mt-4">
            <div class="col-md-3 text-center">
                <button type="reset" name="reset" class="btn btn-warning w-100">RESET</button>
            </div>
            <div class="col-md-6" style="margin-bottom: 5px;"></div>
            <div class="col-md-3 text-center">
                <button type="submit" class="btn btn-success w-100">SUBMIT</button>
            </div>
        </div>

        </div>
    </form>
</div>

<!-- File Confirmation Modal -->
<div class="modal fade" id="filePreviewModal" tabindex="-1" aria-labelledby="filePreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h5 class="modal-title" id="filePreviewModalLabel">
                    <i class="bi bi-file-earmark-check me-2"></i>File Confirmation & Preview
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body file-preview-content" id="filePreviewContent">
                <!-- File confirmation content will be inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" id="removeFileBtn">
                    <i class="bi bi-trash me-1"></i>Remove File
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Close
                </button>
                <button type="button" class="btn btn-success" data-bs-dismiss="modal">
                    <i class="bi bi-check-circle me-1"></i>Confirm & Keep
                </button>
            </div>
        </div>
    </div>
                  </div>
                  <!-- /.card-body -->
                </div>
                <!-- /.card -->
              </div>
            </div>
            <!--end::Row-->
          </div>
          <!--end::Container-->
        </div>
        <!--end::App Content-->
      </main>
      <!--end::App Main-->
      <Footer />
    </div>
    <!--end::App Wrapper-->
    <!--begin::Script-->
    <Scripts path={path} />
    <script>
    /**
 * AdminLTE Study Material Form Handler
 * Optimized for AdminLTE theme with modern JavaScript practices
 */

class StudyMaterialFormHandler {
    constructor() {
        this.selectedFiles = [];
        this.isSubmitting = false;
        this.maxFiles = 5;
        this.maxFileSize = 100 * 1024 * 1024; // 100MB
        this.allowedFormats = ['pdf', 'docx', 'doc', 'pptx', 'ppt', 'txt'];
        
        this.init();
    }

    init() {
        this.cacheElements();
        this.bindEvents();
        this.initializeTooltips();
        this.setupFormValidation();
    }

    cacheElements() {
        this.form = document.getElementById("py_quespaper");
        this.fileInput = document.querySelector("#file");
        this.fileUploadContainer = document.getElementById("fileUploadContainer");
        this.fileUploadText = document.getElementById("fileUploadText");
        this.fileList = document.getElementById("fileList");
        this.submitButton = document.querySelector('button[type="submit"]');
        this.resetButton = document.querySelector('button[type="reset"]');
        
        // Validation elements
        this.validationFields = [
            { id: "subject", errorId: "subjectError", message: "Please select a subject." },
            { id: "semester", errorId: "semesterError", message: "Please select a semester." },
            { id: "title", errorId: "titleError", message: "Please enter a title." },
            { id: "file", errorId: "fileError", message: "Please upload at least one file." },
            { id: "fileDescription", errorId: "fileDescriptionError", message: "Please enter a file description." }
        ];
    }

    bindEvents() {
        // File input events
        this.fileInput?.addEventListener("change", (e) => this.handleFileSelection(e.target.files));
        
        // Upload container events
        this.fileUploadContainer?.addEventListener('click', (e) => this.handleContainerClick(e));
        this.fileUploadContainer?.addEventListener('dragover', (e) => this.handleDragOver(e));
        this.fileUploadContainer?.addEventListener('dragleave', (e) => this.handleDragLeave(e));
        this.fileUploadContainer?.addEventListener('drop', (e) => this.handleDrop(e));
        
        // Form events
        this.form?.addEventListener("submit", (e) => this.handleFormSubmit(e));
        this.submitButton?.addEventListener("click", (e) => this.handleSubmitClick(e));
        this.resetButton?.addEventListener("click", () => this.resetForm());
        
        // Field validation events
        this.setupFieldValidation();
    }

    setupFieldValidation() {
        document.querySelectorAll("input, textarea, select").forEach((field) => {
            field.addEventListener("input", () => this.validateField(field));
            field.addEventListener("blur", () => this.validateField(field));
            field.addEventListener("focus", () => this.clearFieldError(field));
        });
    }

    initializeTooltips() {
        // Initialize AdminLTE tooltips
        if (typeof $ !== 'undefined' && $.fn.tooltip) {
            $('[data-toggle="tooltip"]').tooltip();
        }
    }

    setupFormValidation() {
        // Setup real-time validation feedback
        this.validationFields.forEach(field => {
            const element = document.getElementById(field.id);
            if (element) {
                element.setAttribute('data-validation-message', field.message);
            }
        });
    }

    // File handling methods
    handleFileSelection(files) {
        if (!files || files.length === 0) return;
        
        this.showUploadProgress();
        
        const newFiles = Array.from(files);
        const validFiles = this.filterValidFiles(newFiles);
        
        if (validFiles.length !== newFiles.length) {
            this.showNotification('warning', 'Some files were skipped due to invalid format or size.');
        }
        
        this.addFilesToSelection(validFiles);
        this.hideUploadProgress();
    }

    filterValidFiles(files) {
        return files.filter(file => {
            const isValidSize = file.size <= this.maxFileSize;
            const isValidFormat = this.isValidFileFormat(file.name);
            
            if (!isValidSize) {
                this.showNotification('error', `File "${file.name}" is too large. Maximum size is 100MB.`);
                return false;
            }
            
            if (!isValidFormat) {
                this.showNotification('error', `File "${file.name}" has an unsupported format.`);
                return false;
            }
            
            return true;
        });
    }

    addFilesToSelection(newFiles) {
        const availableSlots = this.maxFiles - this.selectedFiles.length;
        
        if (newFiles.length > availableSlots) {
            if (availableSlots > 0) {
                this.showNotification('warning', `Only ${availableSlots} more files can be added.`);
                this.selectedFiles.push(...newFiles.slice(0, availableSlots));
            } else {
                this.showNotification('error', 'Maximum file limit reached. Please remove some files first.');
                return;
            }
        } else {
            this.selectedFiles.push(...newFiles);
        }
        
        this.updateFileDisplay();
        this.updateFileInput();
        this.validateFileUpload();
    }

    removeFile(index) {
        if (index >= 0 && index < this.selectedFiles.length) {
            const fileName = this.selectedFiles[index].name;
            this.selectedFiles.splice(index, 1);
            this.updateFileDisplay();
            this.updateFileInput();
            this.validateFileUpload();
            this.showNotification('info', `File "${fileName}" removed.`);
        }
    }

    updateFileDisplay() {
        if (this.selectedFiles.length === 0) {
            this.showEmptyState();
            return;
        }
        
        this.showFilesState();
        this.renderFileList();
    }

    showEmptyState() {
        this.fileUploadContainer?.classList.remove('has-files');
        this.fileList.style.display = 'none';
        
        if (this.fileUploadText) {
            this.fileUploadText.innerHTML = `
                <div class="text-center">
                    <i class="fas fa-cloud-upload-alt fa-2x text-muted mb-2"></i>
                    <div><strong>Click to browse files</strong></div>
                    <div class="text-muted">or drag and drop your files here</div>
                    <small class="text-muted">PDF, Word, PowerPoint, Text • Max 100MB each • Up to 5 files</small>
                </div>
            `;
        }
    }

    showFilesState() {
        this.fileUploadContainer?.classList.add('has-files');
        
        if (this.fileUploadText) {
            this.fileUploadText.innerHTML = `
                <div class="text-center">
                    <i class="fas fa-check-circle text-success fa-2x mb-2"></i>
                    <div><strong>${this.selectedFiles.length} file(s) selected</strong></div>
                    <small class="text-muted">Click on files below to preview or remove</small>
                </div>
            `;
        }
    }

    renderFileList() {
        if (!this.fileList) return;
        
        this.fileList.innerHTML = this.selectedFiles.map((file, index) => `
            <div class="file-item card card-outline card-primary mb-2" data-file-index="${index}">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <i class="${this.getFileIcon(file)} fa-lg text-primary me-3"></i>
                        <div class="flex-grow-1">
                            <div class="fw-bold">${this.truncateFileName(file.name, 30)}</div>
                            <small class="text-muted">${this.formatFileSize(file.size)} • ${this.getFileExtension(file.name).toUpperCase()}</small>
                        </div>
                        <div class="btn-group">
                            <button type="button" class="btn btn-sm btn-outline-info" onclick="studyFormHandler.previewFile(${index})" title="Preview">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="studyFormHandler.removeFile(${index})" title="Remove">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
        
        this.fileList.style.display = 'block';
    }

    // File preview functionality
    previewFile(index) {
        if (index < 0 || index >= this.selectedFiles.length) return;
        
        const file = this.selectedFiles[index];
        const modalId = 'filePreviewModal';
        
        this.createPreviewModal(modalId);
        this.populatePreviewModal(file, index);
        this.showModal(modalId);
    }

    createPreviewModal(modalId) {
        if (document.getElementById(modalId)) return;
        
        const modalHTML = `
            <div class="modal fade" id="${modalId}" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header bg-primary">
                            <h5 class="modal-title text-white">
                                <i class="fas fa-file-alt me-2"></i>File Preview
                            </h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body" id="previewModalBody">
                            <!-- Content will be populated dynamically -->
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-danger" id="removeFileFromPreview">
                                <i class="fas fa-trash me-1"></i>Remove File
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }

    populatePreviewModal(file, index) {
        const modalBody = document.getElementById('previewModalBody');
        const removeBtn = document.getElementById('removeFileFromPreview');
        
        if (!modalBody) return;
        
        const fileInfo = this.generateFileInfoHTML(file, index);
        const previewContent = this.generatePreviewContent(file);
        
        modalBody.innerHTML = fileInfo + previewContent;
        
        removeBtn.onclick = () => {
            this.removeFile(index);
            this.hideModal('filePreviewModal');
        };
    }

    generateFileInfoHTML(file, index) {
        return `
            <div class="card card-outline card-info mb-3">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="${this.getFileIcon(file)} me-2"></i>File Information
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Name:</strong> ${file.name}
                        </div>
                        <div class="col-md-6">
                            <strong>Size:</strong> ${this.formatFileSize(file.size)}
                        </div>
                        <div class="col-md-6">
                            <strong>Type:</strong> ${this.getFileExtension(file.name).toUpperCase()}
                        </div>
                        <div class="col-md-6">
                            <strong>Position:</strong> ${index + 1} of ${this.selectedFiles.length}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    generatePreviewContent(file) {
        const fileType = file.type;
        const extension = this.getFileExtension(file.name);
        
        if (fileType === 'application/pdf' || extension === 'pdf') {
            const fileURL = URL.createObjectURL(file);
            return `
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">PDF Preview</h6>
                    </div>
                    <div class="card-body p-0">
                        <iframe src="${fileURL}" style="width: 100%; height: 500px; border: none;"></iframe>
                    </div>
                </div>
            `;
        } else if (fileType.includes('image/')) {
            const fileURL = URL.createObjectURL(file);
            return `
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">Image Preview</h6>
                    </div>
                    <div class="card-body text-center">
                        <img src="${fileURL}" class="img-fluid" style="max-height: 400px;" alt="Preview">
                    </div>
                </div>
            `;
        } else if (fileType.includes('text/')) {
            return `
                <div class="card">
                    <div class="card-header">
                        <h6 class="card-title mb-0">Text Preview</h6>
                    </div>
                    <div class="card-body">
                        <div id="textPreviewContent" class="bg-light p-3" style="max-height: 300px; overflow-y: auto; font-family: monospace;">
                            <div class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status"></div>
                                <span class="ms-2">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        } else {
            return `
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Preview not available for this file type. The file will be uploaded successfully.
                </div>
            `;
        }
    }

    // Form submission methods
    handleFormSubmit(e) {
        e.preventDefault();
        if (this.validateForm()) {
            this.submitForm();
        }
    }

    handleSubmitClick(e) {
        e.preventDefault();
        if (this.validateForm()) {
            this.submitForm();
        }
    }

    async submitForm() {
        if (this.isSubmitting) return;
        
        this.setSubmittingState(true);
        
        try {
            await this.performSubmission();
            this.showSubmissionSuccess();
        } catch (error) {
            this.showSubmissionError(error);
        } finally {
            this.setSubmittingState(false);
        }
    }

    setSubmittingState(isSubmitting) {
        this.isSubmitting = isSubmitting;
        
        if (this.submitButton) {
            this.submitButton.disabled = isSubmitting;
            this.submitButton.innerHTML = isSubmitting 
                ? '<i class="fas fa-spinner fa-spin me-1"></i>Submitting...'
                : '<i class="fas fa-paper-plane me-1"></i>Submit Material';
        }
    }

    async performSubmission() {
        const formData = this.collectFormData();
        
        // Show submission progress
        this.showSubmissionProgress();
        
        // Simulate submission (replace with actual API call)
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                // Simulate success/failure
                const success = Math.random() > 0.1; // 90% success rate for demo
                
                if (success) {
                    resolve({ success: true, submissionId: this.generateSubmissionId() });
                } else {
                    reject(new Error('Network error occurred. Please try again.'));
                }
            }, 3000);
        });
    }

    collectFormData() {
        const formData = new FormData(this.form);
        
        // Replace file input with selected files
        formData.delete('file');
        this.selectedFiles.forEach((file, index) => {
            formData.append('files[]', file);
        });
        
        // Add metadata
        formData.append('submission_id', this.generateSubmissionId());
        formData.append('submission_timestamp', new Date().toISOString());
        formData.append('file_count', this.selectedFiles.length.toString());
        
        return formData;
    }

    // Validation methods
    validateForm() {
        let isValid = true;
        
        this.validationFields.forEach(field => {
            if (!this.validateField(document.getElementById(field.id))) {
                isValid = false;
            }
        });
        
        if (!this.validateFileUpload()) {
            isValid = false;
        }
        
        return isValid;
    }

    validateField(element) {
        if (!element) return true;
        
        const value = element.value.trim();
        const isValid = value !== '';
        
        this.setFieldValidationState(element, isValid);
        
        return isValid;
    }

    validateFileUpload() {
        const isValid = this.selectedFiles.length > 0;
        
        const fileError = document.getElementById('fileError');
        if (fileError) {
            fileError.style.display = isValid ? 'none' : 'block';
            fileError.textContent = isValid ? '' : 'Please upload at least one file.';
        }
        
        if (this.fileUploadContainer) {
            this.fileUploadContainer.classList.toggle('is-invalid', !isValid);
        }
        
        return isValid;
    }

    setFieldValidationState(element, isValid) {
        const errorElement = document.getElementById(`${element.id}Error`);
        
        element.classList.toggle('is-invalid', !isValid);
        element.classList.toggle('is-valid', isValid);
        
        if (errorElement) {
            errorElement.style.display = isValid ? 'none' : 'block';
            if (!isValid) {
                errorElement.textContent = element.getAttribute('data-validation-message') || 'This field is required.';
            }
        }
    }

    clearFieldError(element) {
        element.classList.remove('is-invalid');
        const errorElement = document.getElementById(`${element.id}Error`);
        if (errorElement) {
            errorElement.style.display = 'none';
        }
    }

    // UI Helper methods
    showNotification(type, message) {
        // Use AdminLTE's Toast or SweetAlert if available
        if (typeof Swal !== 'undefined') {
            const icon = type === 'error' ? 'error' : type === 'warning' ? 'warning' : 'info';
            Swal.fire({
                icon: icon,
                title: message,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        } else {
            // Fallback to console or create custom notification
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }

    showUploadProgress() {
        // Implementation for upload progress UI
        const progressElement = document.getElementById('uploadProgress');
        if (progressElement) {
            progressElement.style.display = 'block';
        }
    }

    hideUploadProgress() {
        setTimeout(() => {
            const progressElement = document.getElementById('uploadProgress');
            if (progressElement) {
                progressElement.style.display = 'none';
            }
        }, 500);
    }

    showSubmissionProgress() {
        this.createSubmissionModal();
        this.showModal('submissionProgressModal');
    }

    showSubmissionSuccess() {
        this.hideModal('submissionProgressModal');
        this.createSuccessModal();
        this.showModal('submissionSuccessModal');
    }

    showSubmissionError(error) {
        this.hideModal('submissionProgressModal');
        this.showNotification('error', error.message || 'An error occurred during submission.');
    }

    createSubmissionModal() {
        const modalId = 'submissionProgressModal';
        if (document.getElementById(modalId)) return;
        
        const modalHTML = `
            <div class="modal fade" id="${modalId}" tabindex="-1" data-bs-backdrop="static">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header bg-primary border-0">
                            <h5 class="modal-title text-white">
                                <i class="fas fa-cloud-upload-alt me-2"></i>Submitting Form
                            </h5>
                        </div>
                        <div class="modal-body text-center">
                            <div class="spinner-border text-primary mb-3" role="status"></div>
                            <p>Please wait while we process your submission...</p>
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }

    createSuccessModal() {
        const modalId = 'submissionSuccessModal';
        if (document.getElementById(modalId)) return;
        
        const modalHTML = `
            <div class="modal fade" id="${modalId}" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header bg-success border-0">
                            <h5 class="modal-title text-white">
                                <i class="fas fa-check-circle me-2"></i>Submission Successful!
                            </h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="alert alert-success border-0">
                                <h6>Thank you for your contribution!</h6>
                                <p class="mb-0">Your study material has been submitted successfully and will be reviewed shortly.</p>
                            </div>
                            <div id="submissionSummary"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" onclick="studyFormHandler.resetForm(); bootstrap.Modal.getInstance(document.getElementById('${modalId}')).hide();">
                                <i class="fas fa-plus me-1"></i>Submit Another
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }

    // Event handlers
    handleContainerClick(e) {
        if (!e.target.closest('.file-item') && 
            !e.target.closest('button') && 
            e.target !== this.fileInput) {
            this.fileInput?.click();
        }
    }

    handleDragOver(e) {
        e.preventDefault();
        this.fileUploadContainer?.classList.add('drag-over');
    }

    handleDragLeave(e) {
        e.preventDefault();
        this.fileUploadContainer?.classList.remove('drag-over');
    }

    handleDrop(e) {
        e.preventDefault();
        this.fileUploadContainer?.classList.remove('drag-over');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            this.handleFileSelection(files);
        }
    }

    // Utility methods
    updateFileInput() {
        if (!this.fileInput) return;
        
        const dt = new DataTransfer();
        this.selectedFiles.forEach(file => dt.items.add(file));
        this.fileInput.files = dt.files;
    }

    resetForm() {
        this.selectedFiles = [];
        this.isSubmitting = false;
        
        this.form?.reset();
        this.updateFileDisplay();
        this.clearAllValidationStates();
        
        if (this.submitButton) {
            this.submitButton.disabled = false;
            this.submitButton.innerHTML = '<i class="fas fa-paper-plane me-1"></i>Submit Material';
        }
        
        this.showNotification('info', 'Form has been reset.');
    }

    clearAllValidationStates() {
        document.querySelectorAll('.is-invalid, .is-valid').forEach(el => {
            el.classList.remove('is-invalid', 'is-valid');
        });
        
        document.querySelectorAll('.error-message').forEach(el => {
            el.style.display = 'none';
        });
    }

    // File utility methods
    isValidFileFormat(fileName) {
        const extension = this.getFileExtension(fileName);
        return this.allowedFormats.includes(extension);
    }

    getFileExtension(fileName) {
        return fileName.split('.').pop().toLowerCase();
    }

    getFileIcon(file) {
        const extension = this.getFileExtension(file.name);
        
        switch(extension) {
            case 'pdf': return 'fas fa-file-pdf text-danger';
            case 'doc':
            case 'docx': return 'fas fa-file-word text-primary';
            case 'ppt':
            case 'pptx': return 'fas fa-file-powerpoint text-warning';
            case 'txt': return 'fas fa-file-alt text-info';
            default: return 'fas fa-file text-secondary';
        }
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    truncateFileName(fileName, maxLength) {
        if (fileName.length <= maxLength) return fileName;
        
        const extension = fileName.split('.').pop();
        const nameWithoutExt = fileName.substring(0, fileName.lastIndexOf('.'));
        const truncatedName = nameWithoutExt.substring(0, maxLength - extension.length - 4) + '...';
        
        return truncatedName + '.' + extension;
    }

    generateSubmissionId() {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substr(2, 5);
        return `SM-${timestamp}-${random}`.toUpperCase();
    }

    // Modal utilities
    showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal && typeof bootstrap !== 'undefined') {
            new bootstrap.Modal(modal).show();
        }
    }

    hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal && typeof bootstrap !== 'undefined') {
            const modalInstance = bootstrap.Modal.getInstance(modal);
            if (modalInstance) {
                modalInstance.hide();
            }
        }
    }
}

// Initialize the form handler when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Create global instance for easy access
    window.studyFormHandler = new StudyMaterialFormHandler();
});

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
    module.exports = StudyMaterialFormHandler;
}
    </script>
    <!--end::Script-->
  </body><!--end::Body-->
</html>
